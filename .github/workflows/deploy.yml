# Required Environment Variables:
#   - BRANCH_TO_DEPLOY: The branch in this repo to be deployed.
#
# Optional Environment Variables:
#   - ACTIONS_DEPLOY_KEY (If deploying to an external repository via EXTERNAL_REPO_NAME): The private SSH key for deployment, configured as a secret. The corresponding public key must be added as a deploy key with write access to the target external repository.
#   - DEPLOYMENT_URL: The URL of the deployed site (defaults to https://ethercraftguild.github.io/).
#   - ARTIFACT_PATH: The directory containing the built static files to deploy (defaults to ./out for Next.js/Nuxt.js, ./public for Hugo).
#   - PUBLISH_BRANCH_NAME: The branch to deploy to. Defaults to 'main' if EXTERNAL_REPO_NAME is set, otherwise 'gh-pages'.
#   - EXTERNAL_REPO_NAME:  If set, specifies an external repository (e.g., `owner/repo-name`) to deploy to. If not set, deployment will be to a branch in the current repository.
#

name: Build & Deploy Static Site

on:
  workflow_dispatch:

# Allow actions/checkout to fetch code and for other workspace operations
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy-to-pages:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ env.DEPLOYMENT_URL || 'https://mmhshayer.github.io/' }}
    steps:
      - name: Checkout Source Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_TO_DEPLOY }}
          submodules: true # Needed for Hugo themes
          fetch-depth: 0 # Needed for Hugo themes

      - name: Detect Project Type
        id: detect-project-type
        run: |
          PROJECT_TYPE="unknown"
          ARTIFACT_DEFAULT_PATH=""

          if [ -f "${{ github.workspace }}/next.config.js" ]; then
            echo "Detected Next.js project."
            PROJECT_TYPE="nextjs"
            ARTIFACT_DEFAULT_PATH="./out"
          elif [ -f "${{ github.workspace }}/nuxt.config.js" ]; then
            echo "Detected Nuxt.js project."
            PROJECT_TYPE="nuxtjs"
            ARTIFACT_DEFAULT_PATH="./dist" # Nuxt.js default build output
          elif [ -f "${{ github.workspace }}/config.toml" ] || [ -f "${{ github.workspace }}/config.yaml" ] || [ -f "${{ github.workspace }}/config.json" ] || [ -d "${{ github.workspace }}/archetypes" ] || [ -d "${{ github.workspace }}/content" ]; then
            echo "Detected Hugo project."
            PROJECT_TYPE="hugo"
            ARTIFACT_DEFAULT_PATH="./public"
          else
            echo "Unable to determine project type. Exiting."
            exit 1
          fi

          echo "project_type=$PROJECT_TYPE" >> $GITHUB_OUTPUT
          echo "artifact_default_path=$ARTIFACT_DEFAULT_PATH" >> $GITHUB_OUTPUT

      - name: Setup Node.js Environment (for Next.js/Nuxt.js)
        if: ${{ steps.detect-project-type.outputs.project_type == 'nextjs' || steps.detect-project-type.outputs.project_type == 'nuxtjs' }}
        uses: actions/setup-node@v4
        with:
          node-version: "20.17.0"
          cache: ${{ steps.detect-package-manager.outputs.manager }} # This step is defined later, might need re-evaluation

      - name: Detect package manager (for Node.js projects)
        id: detect-package-manager
        if: ${{ steps.detect-project-type.outputs.project_type == 'nextjs' || steps.detect-project-type.outputs.project_type == 'nuxtjs' }}
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager for Node.js project"
            exit 1
          fi

      - name: Install dependencies (for Node.js projects)
        if: ${{ steps.detect-project-type.outputs.project_type == 'nextjs' || steps.detect-project-type.outputs.project_type == 'nuxtjs' }}
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Build Next.js Static Site
        if: ${{ steps.detect-project-type.outputs.project_type == 'nextjs' }}
        run: ${{ steps.detect-package-manager.outputs.runner }} next build && ${{ steps.detect-package-manager.outputs.runner }} next export
        env:
          NODE_ENV: production

      - name: Build Nuxt.js Static Site
        if: ${{ steps.detect-project-type.outputs.project_type == 'nuxtjs' }}
        run: ${{ steps.detect-package-manager.outputs.runner }} nuxt generate
        env:
          NODE_ENV: production

      - name: Setup Hugo Environment
        if: ${{ steps.detect-project-type.outputs.project_type == 'hugo' }}
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: "latest" # Use 'latest' or a specific version like '0.91.2'

      - name: Build Hugo Site
        if: ${{ steps.detect-project-type.outputs.project_type == 'hugo' }}
        run: hugo --minify

      - name: Deploy to GitHub Pages
        id: deployment
        uses: peaceiris/actions-gh-pages@v4
        with:
          # For same-repository deployments (when EXTERNAL_REPO_NAME is not set), use GITHUB_TOKEN.
          github_token: ${{ !env.EXTERNAL_REPO_NAME && secrets.GITHUB_TOKEN || '' }}
          # For external repository deployments (when EXTERNAL_REPO_NAME is set), use an SSH Deploy Key.
          deploy_key: ${{ env.EXTERNAL_REPO_NAME && secrets.ACTIONS_DEPLOY_KEY || '' }}
          publish_dir: ${{ env.ARTIFACT_PATH || steps.detect-project-type.outputs.artifact_default_path }}
          # If EXTERNAL_REPO_NAME is set, deploy to it. Otherwise, action defaults to the current repository.
          # Example: username/external-repository
          external_repository: ${{ env.EXTERNAL_REPO_NAME }}
          # If EXTERNAL_REPO_NAME is set, default publish_branch to 'main'; otherwise (same repo), default to 'gh-pages'.
          # User can override with PUBLISH_BRANCH_NAME env var.
          publish_branch: ${{ env.PUBLISH_BRANCH_NAME || (env.EXTERNAL_REPO_NAME && 'main') || 'gh-pages' }}
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"
# ---
# External Repository Deployment & SSH Key Setup
# ---
# This workflow can deploy your site to a **different GitHub repository**
# than where the code lives. This is especially useful for publishing a
# site from a private source repository to a public GitHub Pages repository.
#
# By default, files publish to the current repository.
# To deploy to an **external repository**:
#   - Set the `EXTERNAL_REPO_NAME` environment variable to `owner/repository-name`.
#   - Authentication for external repos **requires an SSH Deploy Key**.
#     The private key must be configured as a secret named `ACTIONS_DEPLOY_KEY`
#     in *this* repository. The public key needs write access in the *target* repository.
#
# ---
# Setting up an SSH Deploy Key:
# ---
# 1.  **Generate Keys**: Run `ssh-keygen -t ed25519 -C "$(git config user.email)" -f gh-pages -N ""`
#     This creates `gh-pages` (private) and `gh-pages.pub` (public) keys.
#
# 2.  **Add Public Key to Target Repository**:
#     Go to the **external repository's** `Settings` > `Deploy keys`.
#     Add `gh-pages.pub` content and **enable "Allow write access"**.
#
# 3.  **Add Private Key to Source Repository**:
#     Go to **this repository's** `Settings` > `Secrets and variables` > `Actions`.
#     Create a new secret named `ACTIONS_DEPLOY_KEY` and paste the `gh-pages` (private key) content.
